
509_GROUP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000bf8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fa4  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e81  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 49 05 	call	0xa92	; 0xa92 <main>
  7a:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <M_DIO_Void_SetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Interface.h"


void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
  82:	28 2f       	mov	r18, r24
  84:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
  86:	6a e0       	ldi	r22, 0x0A	; 10
  88:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
  8c:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
  8e:	82 2f       	mov	r24, r18
  90:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
			switch(Copy_U8_State)
  94:	33 23       	and	r19, r19
  96:	21 f0       	breq	.+8      	; 0xa0 <M_DIO_Void_SetPinDirection+0x1e>
  98:	31 30       	cpi	r19, 0x01	; 1
  9a:	09 f0       	breq	.+2      	; 0x9e <M_DIO_Void_SetPinDirection+0x1c>
  9c:	86 c0       	rjmp	.+268    	; 0x1aa <M_DIO_Void_SetPinDirection+0x128>
  9e:	46 c0       	rjmp	.+140    	; 0x12c <M_DIO_Void_SetPinDirection+0xaa>
			{
			case INPUT :
				switch(Local_U8_Port)
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	d1 f0       	breq	.+52     	; 0xd8 <M_DIO_Void_SetPinDirection+0x56>
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	20 f4       	brcc	.+8      	; 0xb0 <M_DIO_Void_SetPinDirection+0x2e>
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	09 f0       	breq	.+2      	; 0xae <M_DIO_Void_SetPinDirection+0x2c>
  ac:	7e c0       	rjmp	.+252    	; 0x1aa <M_DIO_Void_SetPinDirection+0x128>
  ae:	06 c0       	rjmp	.+12     	; 0xbc <M_DIO_Void_SetPinDirection+0x3a>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	01 f1       	breq	.+64     	; 0xf4 <M_DIO_Void_SetPinDirection+0x72>
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	09 f0       	breq	.+2      	; 0xba <M_DIO_Void_SetPinDirection+0x38>
  b8:	78 c0       	rjmp	.+240    	; 0x1aa <M_DIO_Void_SetPinDirection+0x128>
  ba:	2a c0       	rjmp	.+84     	; 0x110 <M_DIO_Void_SetPinDirection+0x8e>
				{
				case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
  bc:	ea e3       	ldi	r30, 0x3A	; 58
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	20 81       	ld	r18, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <M_DIO_Void_SetPinDirection+0x4a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	4a 95       	dec	r20
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <M_DIO_Void_SetPinDirection+0x46>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret
				case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
  d8:	e7 e3       	ldi	r30, 0x37	; 55
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	20 81       	ld	r18, Z
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <M_DIO_Void_SetPinDirection+0x66>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	4a 95       	dec	r20
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <M_DIO_Void_SetPinDirection+0x62>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret
				case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	20 81       	ld	r18, Z
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <M_DIO_Void_SetPinDirection+0x82>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	4a 95       	dec	r20
 106:	e2 f7       	brpl	.-8      	; 0x100 <M_DIO_Void_SetPinDirection+0x7e>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret
				case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
 110:	e1 e3       	ldi	r30, 0x31	; 49
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	20 81       	ld	r18, Z
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <M_DIO_Void_SetPinDirection+0x9e>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	4a 95       	dec	r20
 122:	e2 f7       	brpl	.-8      	; 0x11c <M_DIO_Void_SetPinDirection+0x9a>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret
				default:                                break;
				}
				break;
			case OUTPUT:
				switch(Local_U8_Port)
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	b9 f0       	breq	.+46     	; 0x15e <M_DIO_Void_SetPinDirection+0xdc>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	18 f4       	brcc	.+6      	; 0x13a <M_DIO_Void_SetPinDirection+0xb8>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	c9 f5       	brne	.+114    	; 0x1aa <M_DIO_Void_SetPinDirection+0x128>
 138:	05 c0       	rjmp	.+10     	; 0x144 <M_DIO_Void_SetPinDirection+0xc2>
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	e9 f0       	breq	.+58     	; 0x178 <M_DIO_Void_SetPinDirection+0xf6>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	a1 f5       	brne	.+104    	; 0x1aa <M_DIO_Void_SetPinDirection+0x128>
 142:	27 c0       	rjmp	.+78     	; 0x192 <M_DIO_Void_SetPinDirection+0x110>
				{
				case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
 144:	ea e3       	ldi	r30, 0x3A	; 58
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	20 81       	ld	r18, Z
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <M_DIO_Void_SetPinDirection+0xd2>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	4a 95       	dec	r20
 156:	e2 f7       	brpl	.-8      	; 0x150 <M_DIO_Void_SetPinDirection+0xce>
 158:	28 2b       	or	r18, r24
 15a:	20 83       	st	Z, r18
 15c:	08 95       	ret
				case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
 15e:	e7 e3       	ldi	r30, 0x37	; 55
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	20 81       	ld	r18, Z
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <M_DIO_Void_SetPinDirection+0xec>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	4a 95       	dec	r20
 170:	e2 f7       	brpl	.-8      	; 0x16a <M_DIO_Void_SetPinDirection+0xe8>
 172:	28 2b       	or	r18, r24
 174:	20 83       	st	Z, r18
 176:	08 95       	ret
				case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
 178:	e4 e3       	ldi	r30, 0x34	; 52
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	20 81       	ld	r18, Z
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <M_DIO_Void_SetPinDirection+0x106>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	4a 95       	dec	r20
 18a:	e2 f7       	brpl	.-8      	; 0x184 <M_DIO_Void_SetPinDirection+0x102>
 18c:	28 2b       	or	r18, r24
 18e:	20 83       	st	Z, r18
 190:	08 95       	ret
				case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
 192:	e1 e3       	ldi	r30, 0x31	; 49
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	20 81       	ld	r18, Z
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <M_DIO_Void_SetPinDirection+0x120>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	4a 95       	dec	r20
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <M_DIO_Void_SetPinDirection+0x11c>
 1a6:	28 2b       	or	r18, r24
 1a8:	20 83       	st	Z, r18
 1aa:	08 95       	ret

000001ac <M_DIO_Void_SetPinValue>:
				default:                                break;
			}
}

void M_DIO_Void_SetPinValue(u8 Copy_U8_Num ,u8 Copy_U8_State)
{
 1ac:	28 2f       	mov	r18, r24
 1ae:	36 2f       	mov	r19, r22
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 1b0:	6a e0       	ldi	r22, 0x0A	; 10
 1b2:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 1b6:	49 2f       	mov	r20, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
 1b8:	82 2f       	mov	r24, r18
 1ba:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
			switch(Copy_U8_State)
 1be:	33 23       	and	r19, r19
 1c0:	21 f0       	breq	.+8      	; 0x1ca <M_DIO_Void_SetPinValue+0x1e>
 1c2:	31 30       	cpi	r19, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <M_DIO_Void_SetPinValue+0x1c>
 1c6:	86 c0       	rjmp	.+268    	; 0x2d4 <M_DIO_Void_SetPinValue+0x128>
 1c8:	46 c0       	rjmp	.+140    	; 0x256 <M_DIO_Void_SetPinValue+0xaa>
			{
			case LOW :
				switch(Local_U8_Port)
 1ca:	82 30       	cpi	r24, 0x02	; 2
 1cc:	d1 f0       	breq	.+52     	; 0x202 <M_DIO_Void_SetPinValue+0x56>
 1ce:	83 30       	cpi	r24, 0x03	; 3
 1d0:	20 f4       	brcc	.+8      	; 0x1da <M_DIO_Void_SetPinValue+0x2e>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <M_DIO_Void_SetPinValue+0x2c>
 1d6:	7e c0       	rjmp	.+252    	; 0x2d4 <M_DIO_Void_SetPinValue+0x128>
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <M_DIO_Void_SetPinValue+0x3a>
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	01 f1       	breq	.+64     	; 0x21e <M_DIO_Void_SetPinValue+0x72>
 1de:	84 30       	cpi	r24, 0x04	; 4
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <M_DIO_Void_SetPinValue+0x38>
 1e2:	78 c0       	rjmp	.+240    	; 0x2d4 <M_DIO_Void_SetPinValue+0x128>
 1e4:	2a c0       	rjmp	.+84     	; 0x23a <M_DIO_Void_SetPinValue+0x8e>
				{
				case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
 1e6:	eb e3       	ldi	r30, 0x3B	; 59
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	20 81       	ld	r18, Z
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <M_DIO_Void_SetPinValue+0x4a>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	4a 95       	dec	r20
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <M_DIO_Void_SetPinValue+0x46>
 1fa:	80 95       	com	r24
 1fc:	82 23       	and	r24, r18
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret
				case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
 202:	e8 e3       	ldi	r30, 0x38	; 56
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	20 81       	ld	r18, Z
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <M_DIO_Void_SetPinValue+0x66>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	4a 95       	dec	r20
 214:	e2 f7       	brpl	.-8      	; 0x20e <M_DIO_Void_SetPinValue+0x62>
 216:	80 95       	com	r24
 218:	82 23       	and	r24, r18
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret
				case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
 21e:	e5 e3       	ldi	r30, 0x35	; 53
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	20 81       	ld	r18, Z
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <M_DIO_Void_SetPinValue+0x82>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	4a 95       	dec	r20
 230:	e2 f7       	brpl	.-8      	; 0x22a <M_DIO_Void_SetPinValue+0x7e>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	80 83       	st	Z, r24
 238:	08 95       	ret
				case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
 23a:	e2 e3       	ldi	r30, 0x32	; 50
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	20 81       	ld	r18, Z
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <M_DIO_Void_SetPinValue+0x9e>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	4a 95       	dec	r20
 24c:	e2 f7       	brpl	.-8      	; 0x246 <M_DIO_Void_SetPinValue+0x9a>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	80 83       	st	Z, r24
 254:	08 95       	ret
				default:                                 break;
				}
				break;
			case HIGH:
				switch(Local_U8_Port)
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	b9 f0       	breq	.+46     	; 0x288 <M_DIO_Void_SetPinValue+0xdc>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	18 f4       	brcc	.+6      	; 0x264 <M_DIO_Void_SetPinValue+0xb8>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	c9 f5       	brne	.+114    	; 0x2d4 <M_DIO_Void_SetPinValue+0x128>
 262:	05 c0       	rjmp	.+10     	; 0x26e <M_DIO_Void_SetPinValue+0xc2>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	e9 f0       	breq	.+58     	; 0x2a2 <M_DIO_Void_SetPinValue+0xf6>
 268:	84 30       	cpi	r24, 0x04	; 4
 26a:	a1 f5       	brne	.+104    	; 0x2d4 <M_DIO_Void_SetPinValue+0x128>
 26c:	27 c0       	rjmp	.+78     	; 0x2bc <M_DIO_Void_SetPinValue+0x110>
				{
				case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
 26e:	eb e3       	ldi	r30, 0x3B	; 59
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <M_DIO_Void_SetPinValue+0xd2>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	4a 95       	dec	r20
 280:	e2 f7       	brpl	.-8      	; 0x27a <M_DIO_Void_SetPinValue+0xce>
 282:	28 2b       	or	r18, r24
 284:	20 83       	st	Z, r18
 286:	08 95       	ret
				case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
 288:	e8 e3       	ldi	r30, 0x38	; 56
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	20 81       	ld	r18, Z
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <M_DIO_Void_SetPinValue+0xec>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	4a 95       	dec	r20
 29a:	e2 f7       	brpl	.-8      	; 0x294 <M_DIO_Void_SetPinValue+0xe8>
 29c:	28 2b       	or	r18, r24
 29e:	20 83       	st	Z, r18
 2a0:	08 95       	ret
				case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
 2a2:	e5 e3       	ldi	r30, 0x35	; 53
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	20 81       	ld	r18, Z
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <M_DIO_Void_SetPinValue+0x106>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	4a 95       	dec	r20
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <M_DIO_Void_SetPinValue+0x102>
 2b6:	28 2b       	or	r18, r24
 2b8:	20 83       	st	Z, r18
 2ba:	08 95       	ret
				case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
 2bc:	e2 e3       	ldi	r30, 0x32	; 50
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	20 81       	ld	r18, Z
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <M_DIO_Void_SetPinValue+0x120>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	4a 95       	dec	r20
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <M_DIO_Void_SetPinValue+0x11c>
 2d0:	28 2b       	or	r18, r24
 2d2:	20 83       	st	Z, r18
 2d4:	08 95       	ret

000002d6 <M_DIO_Void_TogPin>:
				break;
				default:                                 break;
			}
}
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
 2d6:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 2d8:	6a e0       	ldi	r22, 0x0A	; 10
 2da:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 2de:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	switch(Local_U8_Port)
 2e0:	82 2f       	mov	r24, r18
 2e2:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	b9 f0       	breq	.+46     	; 0x318 <M_DIO_Void_TogPin+0x42>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	18 f4       	brcc	.+6      	; 0x2f4 <M_DIO_Void_TogPin+0x1e>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	c9 f5       	brne	.+114    	; 0x364 <M_DIO_Void_TogPin+0x8e>
 2f2:	05 c0       	rjmp	.+10     	; 0x2fe <M_DIO_Void_TogPin+0x28>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	e9 f0       	breq	.+58     	; 0x332 <M_DIO_Void_TogPin+0x5c>
 2f8:	84 30       	cpi	r24, 0x04	; 4
 2fa:	a1 f5       	brne	.+104    	; 0x364 <M_DIO_Void_TogPin+0x8e>
 2fc:	27 c0       	rjmp	.+78     	; 0x34c <M_DIO_Void_TogPin+0x76>
	{
	case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
 2fe:	eb e3       	ldi	r30, 0x3B	; 59
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	20 81       	ld	r18, Z
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <M_DIO_Void_TogPin+0x38>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	3a 95       	dec	r19
 310:	e2 f7       	brpl	.-8      	; 0x30a <M_DIO_Void_TogPin+0x34>
 312:	28 27       	eor	r18, r24
 314:	20 83       	st	Z, r18
 316:	08 95       	ret
	case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
 318:	e8 e3       	ldi	r30, 0x38	; 56
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	20 81       	ld	r18, Z
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	02 c0       	rjmp	.+4      	; 0x328 <M_DIO_Void_TogPin+0x52>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	3a 95       	dec	r19
 32a:	e2 f7       	brpl	.-8      	; 0x324 <M_DIO_Void_TogPin+0x4e>
 32c:	28 27       	eor	r18, r24
 32e:	20 83       	st	Z, r18
 330:	08 95       	ret
	case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
 332:	e5 e3       	ldi	r30, 0x35	; 53
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	20 81       	ld	r18, Z
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	02 c0       	rjmp	.+4      	; 0x342 <M_DIO_Void_TogPin+0x6c>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	3a 95       	dec	r19
 344:	e2 f7       	brpl	.-8      	; 0x33e <M_DIO_Void_TogPin+0x68>
 346:	28 27       	eor	r18, r24
 348:	20 83       	st	Z, r18
 34a:	08 95       	ret
	case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
 34c:	e2 e3       	ldi	r30, 0x32	; 50
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	20 81       	ld	r18, Z
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <M_DIO_Void_TogPin+0x86>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	3a 95       	dec	r19
 35e:	e2 f7       	brpl	.-8      	; 0x358 <M_DIO_Void_TogPin+0x82>
 360:	28 27       	eor	r18, r24
 362:	20 83       	st	Z, r18
 364:	08 95       	ret

00000366 <M_DIO_U8_GetPinValue>:
	default:                                 break;
	}
}
u8   M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
 366:	28 2f       	mov	r18, r24
	u8 Local_U8_Pin  = Copy_U8_Num % 10;
 368:	6a e0       	ldi	r22, 0x0A	; 10
 36a:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 36e:	39 2f       	mov	r19, r25
	u8 Local_U8_Port = Copy_U8_Num / 10;
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Port)
 370:	82 2f       	mov	r24, r18
 372:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	a1 f0       	breq	.+40     	; 0x3a2 <M_DIO_U8_GetPinValue+0x3c>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	18 f4       	brcc	.+6      	; 0x384 <M_DIO_U8_GetPinValue+0x1e>
 37e:	81 30       	cpi	r24, 0x01	; 1
 380:	29 f4       	brne	.+10     	; 0x38c <M_DIO_U8_GetPinValue+0x26>
 382:	06 c0       	rjmp	.+12     	; 0x390 <M_DIO_U8_GetPinValue+0x2a>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	b1 f0       	breq	.+44     	; 0x3b4 <M_DIO_U8_GetPinValue+0x4e>
 388:	84 30       	cpi	r24, 0x04	; 4
 38a:	e9 f0       	breq	.+58     	; 0x3c6 <M_DIO_U8_GetPinValue+0x60>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	08 95       	ret
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
 390:	89 b3       	in	r24, 0x19	; 25
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <M_DIO_U8_GetPinValue+0x34>
 396:	95 95       	asr	r25
 398:	87 95       	ror	r24
 39a:	3a 95       	dec	r19
 39c:	e2 f7       	brpl	.-8      	; 0x396 <M_DIO_U8_GetPinValue+0x30>
 39e:	81 70       	andi	r24, 0x01	; 1
 3a0:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
 3a2:	86 b3       	in	r24, 0x16	; 22
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <M_DIO_U8_GetPinValue+0x46>
 3a8:	95 95       	asr	r25
 3aa:	87 95       	ror	r24
 3ac:	3a 95       	dec	r19
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <M_DIO_U8_GetPinValue+0x42>
 3b0:	81 70       	andi	r24, 0x01	; 1
 3b2:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
 3b4:	83 b3       	in	r24, 0x13	; 19
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <M_DIO_U8_GetPinValue+0x58>
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	3a 95       	dec	r19
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <M_DIO_U8_GetPinValue+0x54>
 3c2:	81 70       	andi	r24, 0x01	; 1
 3c4:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
 3c6:	80 b3       	in	r24, 0x10	; 16
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <M_DIO_U8_GetPinValue+0x6a>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	3a 95       	dec	r19
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <M_DIO_U8_GetPinValue+0x66>
 3d4:	81 70       	andi	r24, 0x01	; 1
	default:                                                   break;
	}
	return Local_U8_Reading;
}
 3d6:	08 95       	ret

000003d8 <H_SSD_Void_SSDDigitDisplay>:
	}
}

static void H_SSD_Void_SSDDigitDisplay(u8 Copy_U8_Number)
{
	switch(Copy_U8_Number)
 3d8:	84 30       	cpi	r24, 0x04	; 4
 3da:	09 f4       	brne	.+2      	; 0x3de <H_SSD_Void_SSDDigitDisplay+0x6>
 3dc:	63 c0       	rjmp	.+198    	; 0x4a4 <H_SSD_Void_SSDDigitDisplay+0xcc>
 3de:	85 30       	cpi	r24, 0x05	; 5
 3e0:	50 f4       	brcc	.+20     	; 0x3f6 <H_SSD_Void_SSDDigitDisplay+0x1e>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	61 f1       	breq	.+88     	; 0x43e <H_SSD_Void_SSDDigitDisplay+0x66>
 3e6:	81 30       	cpi	r24, 0x01	; 1
 3e8:	c8 f0       	brcs	.+50     	; 0x41c <H_SSD_Void_SSDDigitDisplay+0x44>
 3ea:	82 30       	cpi	r24, 0x02	; 2
 3ec:	c9 f1       	breq	.+114    	; 0x460 <H_SSD_Void_SSDDigitDisplay+0x88>
 3ee:	83 30       	cpi	r24, 0x03	; 3
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <H_SSD_Void_SSDDigitDisplay+0x1c>
 3f2:	bd c0       	rjmp	.+378    	; 0x56e <H_SSD_Void_SSDDigitDisplay+0x196>
 3f4:	46 c0       	rjmp	.+140    	; 0x482 <H_SSD_Void_SSDDigitDisplay+0xaa>
 3f6:	87 30       	cpi	r24, 0x07	; 7
 3f8:	09 f4       	brne	.+2      	; 0x3fc <H_SSD_Void_SSDDigitDisplay+0x24>
 3fa:	87 c0       	rjmp	.+270    	; 0x50a <H_SSD_Void_SSDDigitDisplay+0x132>
 3fc:	88 30       	cpi	r24, 0x08	; 8
 3fe:	38 f4       	brcc	.+14     	; 0x40e <H_SSD_Void_SSDDigitDisplay+0x36>
 400:	85 30       	cpi	r24, 0x05	; 5
 402:	09 f4       	brne	.+2      	; 0x406 <H_SSD_Void_SSDDigitDisplay+0x2e>
 404:	60 c0       	rjmp	.+192    	; 0x4c6 <H_SSD_Void_SSDDigitDisplay+0xee>
 406:	86 30       	cpi	r24, 0x06	; 6
 408:	09 f0       	breq	.+2      	; 0x40c <H_SSD_Void_SSDDigitDisplay+0x34>
 40a:	b1 c0       	rjmp	.+354    	; 0x56e <H_SSD_Void_SSDDigitDisplay+0x196>
 40c:	6d c0       	rjmp	.+218    	; 0x4e8 <H_SSD_Void_SSDDigitDisplay+0x110>
 40e:	88 30       	cpi	r24, 0x08	; 8
 410:	09 f4       	brne	.+2      	; 0x414 <H_SSD_Void_SSDDigitDisplay+0x3c>
 412:	8c c0       	rjmp	.+280    	; 0x52c <H_SSD_Void_SSDDigitDisplay+0x154>
 414:	89 30       	cpi	r24, 0x09	; 9
 416:	09 f0       	breq	.+2      	; 0x41a <H_SSD_Void_SSDDigitDisplay+0x42>
 418:	aa c0       	rjmp	.+340    	; 0x56e <H_SSD_Void_SSDDigitDisplay+0x196>
 41a:	99 c0       	rjmp	.+306    	; 0x54e <H_SSD_Void_SSDDigitDisplay+0x176>
	{
	case 0:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 424:	8f e0       	ldi	r24, 0x0F	; 15
 426:	60 e0       	ldi	r22, 0x00	; 0
 428:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 42c:	80 e1       	ldi	r24, 0x10	; 16
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 434:	81 e1       	ldi	r24, 0x11	; 17
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 43c:	08 95       	ret
		break;
	case 1:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
 43e:	8e e0       	ldi	r24, 0x0E	; 14
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 446:	8f e0       	ldi	r24, 0x0F	; 15
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 44e:	80 e1       	ldi	r24, 0x10	; 16
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 456:	81 e1       	ldi	r24, 0x11	; 17
 458:	60 e0       	ldi	r22, 0x00	; 0
 45a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 45e:	08 95       	ret
		break;
	case 2:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
 460:	8e e0       	ldi	r24, 0x0E	; 14
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
 468:	8f e0       	ldi	r24, 0x0F	; 15
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 470:	80 e1       	ldi	r24, 0x10	; 16
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 478:	81 e1       	ldi	r24, 0x11	; 17
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 480:	08 95       	ret
		break;
	case 3:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
 482:	8e e0       	ldi	r24, 0x0E	; 14
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
 48a:	8f e0       	ldi	r24, 0x0F	; 15
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 492:	80 e1       	ldi	r24, 0x10	; 16
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 49a:	81 e1       	ldi	r24, 0x11	; 17
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 4a2:	08 95       	ret
		break;
	case 4:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
 4a4:	8e e0       	ldi	r24, 0x0E	; 14
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 4ac:	8f e0       	ldi	r24, 0x0F	; 15
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
 4b4:	80 e1       	ldi	r24, 0x10	; 16
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 4bc:	81 e1       	ldi	r24, 0x11	; 17
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 4c4:	08 95       	ret
		break;
	case 5:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
 4c6:	8e e0       	ldi	r24, 0x0E	; 14
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 4ce:	8f e0       	ldi	r24, 0x0F	; 15
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
 4d6:	80 e1       	ldi	r24, 0x10	; 16
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 4de:	81 e1       	ldi	r24, 0x11	; 17
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 4e6:	08 95       	ret
		break;
	case 6:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
 4e8:	8e e0       	ldi	r24, 0x0E	; 14
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
 4f0:	8f e0       	ldi	r24, 0x0F	; 15
 4f2:	61 e0       	ldi	r22, 0x01	; 1
 4f4:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
 4f8:	80 e1       	ldi	r24, 0x10	; 16
 4fa:	61 e0       	ldi	r22, 0x01	; 1
 4fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 500:	81 e1       	ldi	r24, 0x11	; 17
 502:	60 e0       	ldi	r22, 0x00	; 0
 504:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 508:	08 95       	ret
		break;
	case 7:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
 50a:	8e e0       	ldi	r24, 0x0E	; 14
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,HIGH);
 512:	8f e0       	ldi	r24, 0x0F	; 15
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,HIGH);
 51a:	80 e1       	ldi	r24, 0x10	; 16
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,LOW);
 522:	81 e1       	ldi	r24, 0x11	; 17
 524:	60 e0       	ldi	r22, 0x00	; 0
 526:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 52a:	08 95       	ret
		break;
	case 8:
		M_DIO_Void_SetPinValue(SSD_A_PIN,LOW);
 52c:	8e e0       	ldi	r24, 0x0E	; 14
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 534:	8f e0       	ldi	r24, 0x0F	; 15
 536:	60 e0       	ldi	r22, 0x00	; 0
 538:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 53c:	80 e1       	ldi	r24, 0x10	; 16
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
 544:	81 e1       	ldi	r24, 0x11	; 17
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 54c:	08 95       	ret
		break;
	case 9:
		M_DIO_Void_SetPinValue(SSD_A_PIN,HIGH);
 54e:	8e e0       	ldi	r24, 0x0E	; 14
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_B_PIN,LOW);
 556:	8f e0       	ldi	r24, 0x0F	; 15
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_C_PIN,LOW);
 55e:	80 e1       	ldi	r24, 0x10	; 16
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(SSD_D_PIN,HIGH);
 566:	81 e1       	ldi	r24, 0x11	; 17
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 56e:	08 95       	ret

00000570 <H_SSD_Void_SSDWriteNumber>:

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
 570:	ef 92       	push	r14
 572:	ff 92       	push	r15
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	28 2f       	mov	r18, r24
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
	{
	u8 Local_U8_Ones = Copy_U8_Number % 10;
 57e:	6a e0       	ldi	r22, 0x0A	; 10
 580:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 584:	e9 2e       	mov	r14, r25
	u8 Local_U8_Tens = Copy_U8_Number / 10;
 586:	82 2f       	mov	r24, r18
 588:	0e 94 b1 05 	call	0xb62	; 0xb62 <__udivmodqi4>
 58c:	f8 2e       	mov	r15, r24
 58e:	c0 e0       	ldi	r28, 0x00	; 0
 590:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 592:	00 ea       	ldi	r16, 0xA0	; 160
 594:	1f e0       	ldi	r17, 0x0F	; 15
	H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
 596:	8f 2d       	mov	r24, r15
 598:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,HIGH);
 59c:	86 e1       	ldi	r24, 0x16	; 22
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 5a4:	c8 01       	movw	r24, r16
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <H_SSD_Void_SSDWriteNumber+0x36>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,LOW);
 5aa:	86 e1       	ldi	r24, 0x16	; 22
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
 5b2:	8e 2d       	mov	r24, r14
 5b4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
 5b8:	85 e1       	ldi	r24, 0x15	; 21
 5ba:	61 e0       	ldi	r22, 0x01	; 1
 5bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 5c0:	c8 01       	movw	r24, r16
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <H_SSD_Void_SSDWriteNumber+0x52>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
 5c6:	85 e1       	ldi	r24, 0x15	; 21
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 5ce:	21 96       	adiw	r28, 0x01	; 1
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
}
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Number)
{
	u32 Local_U32_Counter = 0;
	for(;Local_U32_Counter < 500;Local_U32_Counter++)
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	c4 3f       	cpi	r28, 0xF4	; 244
 5d4:	d8 07       	cpc	r29, r24
 5d6:	f9 f6       	brne	.-66     	; 0x596 <H_SSD_Void_SSDWriteNumber+0x26>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
	}
}
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	08 95       	ret

000005e6 <H_SSD_Void_SSDInit>:
#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void)
{
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
 5e6:	8e e0       	ldi	r24, 0x0E	; 14
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
 5ee:	8f e0       	ldi	r24, 0x0F	; 15
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
 5f6:	80 e1       	ldi	r24, 0x10	; 16
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
 5fe:	81 e1       	ldi	r24, 0x11	; 17
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
 606:	85 e1       	ldi	r24, 0x15	; 21
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
 60e:	86 e1       	ldi	r24, 0x16	; 22
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
}
 616:	08 95       	ret

00000618 <H_PB_U8_PBRead>:

}
u8   H_PB_U8_PBRead(u8 Copy_U8_PushButton)
{
	u8 Local_U8_Reading = RELEASED;
	switch (Copy_U8_PushButton)
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	11 f1       	breq	.+68     	; 0x660 <H_PB_U8_PBRead+0x48>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	20 f0       	brcs	.+8      	; 0x628 <H_PB_U8_PBRead+0x10>
 620:	82 30       	cpi	r24, 0x02	; 2
 622:	09 f0       	breq	.+2      	; 0x626 <H_PB_U8_PBRead+0xe>
 624:	51 c0       	rjmp	.+162    	; 0x6c8 <H_PB_U8_PBRead+0xb0>
 626:	36 c0       	rjmp	.+108    	; 0x694 <H_PB_U8_PBRead+0x7c>
	{
	case PB0 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
 628:	84 e1       	ldi	r24, 0x14	; 20
 62a:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 62e:	81 30       	cpi	r24, 0x01	; 1
 630:	09 f0       	breq	.+2      	; 0x634 <H_PB_U8_PBRead+0x1c>
 632:	4a c0       	rjmp	.+148    	; 0x6c8 <H_PB_U8_PBRead+0xb0>
 634:	24 e1       	ldi	r18, 0x14	; 20
 636:	35 e0       	ldi	r19, 0x05	; 5
 638:	40 e9       	ldi	r20, 0x90	; 144
 63a:	51 e0       	ldi	r21, 0x01	; 1
 63c:	ca 01       	movw	r24, r20
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <H_PB_U8_PBRead+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 642:	21 50       	subi	r18, 0x01	; 1
 644:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 646:	d1 f7       	brne	.-12     	; 0x63c <H_PB_U8_PBRead+0x24>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
 648:	84 e1       	ldi	r24, 0x14	; 20
 64a:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	09 f0       	breq	.+2      	; 0x654 <H_PB_U8_PBRead+0x3c>
 652:	3a c0       	rjmp	.+116    	; 0x6c8 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED);
 654:	84 e1       	ldi	r24, 0x14	; 20
 656:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	d9 f3       	breq	.-10     	; 0x654 <H_PB_U8_PBRead+0x3c>
 65e:	36 c0       	rjmp	.+108    	; 0x6cc <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB1 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
 660:	8e e2       	ldi	r24, 0x2E	; 46
 662:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	79 f5       	brne	.+94     	; 0x6c8 <H_PB_U8_PBRead+0xb0>
 66a:	24 e1       	ldi	r18, 0x14	; 20
 66c:	35 e0       	ldi	r19, 0x05	; 5
 66e:	40 e9       	ldi	r20, 0x90	; 144
 670:	51 e0       	ldi	r21, 0x01	; 1
 672:	ca 01       	movw	r24, r20
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <H_PB_U8_PBRead+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 67c:	d1 f7       	brne	.-12     	; 0x672 <H_PB_U8_PBRead+0x5a>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
 67e:	8e e2       	ldi	r24, 0x2E	; 46
 680:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 684:	81 30       	cpi	r24, 0x01	; 1
 686:	01 f5       	brne	.+64     	; 0x6c8 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED);
 688:	8e e2       	ldi	r24, 0x2E	; 46
 68a:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	d9 f3       	breq	.-10     	; 0x688 <H_PB_U8_PBRead+0x70>
 692:	1c c0       	rjmp	.+56     	; 0x6cc <H_PB_U8_PBRead+0xb4>
				Local_U8_Reading = PRESSED;
			}
		}
		break;
	case PB2 :
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
 694:	8a e2       	ldi	r24, 0x2A	; 42
 696:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 69a:	81 30       	cpi	r24, 0x01	; 1
 69c:	a9 f4       	brne	.+42     	; 0x6c8 <H_PB_U8_PBRead+0xb0>
 69e:	24 e1       	ldi	r18, 0x14	; 20
 6a0:	35 e0       	ldi	r19, 0x05	; 5
 6a2:	40 e9       	ldi	r20, 0x90	; 144
 6a4:	51 e0       	ldi	r21, 0x01	; 1
 6a6:	ca 01       	movw	r24, r20
 6a8:	01 97       	sbiw	r24, 0x01	; 1
 6aa:	f1 f7       	brne	.-4      	; 0x6a8 <H_PB_U8_PBRead+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ac:	21 50       	subi	r18, 0x01	; 1
 6ae:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6b0:	d1 f7       	brne	.-12     	; 0x6a6 <H_PB_U8_PBRead+0x8e>
		{
			_delay_ms(PB_DEBOUNCING_TIME);
			if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
 6b2:	8a e2       	ldi	r24, 0x2A	; 42
 6b4:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 6b8:	81 30       	cpi	r24, 0x01	; 1
 6ba:	31 f4       	brne	.+12     	; 0x6c8 <H_PB_U8_PBRead+0xb0>
			{
				while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED);
 6bc:	8a e2       	ldi	r24, 0x2A	; 42
 6be:	0e 94 b3 01 	call	0x366	; 0x366 <M_DIO_U8_GetPinValue>
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	d9 f3       	breq	.-10     	; 0x6bc <H_PB_U8_PBRead+0xa4>
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <H_PB_U8_PBRead+0xb4>
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	08 95       	ret
 6cc:	81 e0       	ldi	r24, 0x01	; 1
		}
		break;
	default  :                                                     break;
	}
	return Local_U8_Reading;
}
 6ce:	08 95       	ret

000006d0 <H_PB_Void_PBInit>:
#include "PB_Interface.h"


void H_PB_Void_PBInit(u8 Copy_U8_PushButton)
{
	switch (Copy_U8_PushButton)
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	51 f0       	breq	.+20     	; 0x6e8 <H_PB_Void_PBInit+0x18>
 6d4:	81 30       	cpi	r24, 0x01	; 1
 6d6:	18 f0       	brcs	.+6      	; 0x6de <H_PB_Void_PBInit+0xe>
 6d8:	82 30       	cpi	r24, 0x02	; 2
 6da:	79 f4       	brne	.+30     	; 0x6fa <H_PB_Void_PBInit+0x2a>
 6dc:	0a c0       	rjmp	.+20     	; 0x6f2 <H_PB_Void_PBInit+0x22>
	{
	case PB0 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
 6de:	84 e1       	ldi	r24, 0x14	; 20
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 6e6:	08 95       	ret
	case PB1 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
 6e8:	84 e1       	ldi	r24, 0x14	; 20
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 6f0:	08 95       	ret
	case PB2 : M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
 6f2:	84 e1       	ldi	r24, 0x14	; 20
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 6fa:	08 95       	ret

000006fc <H_LED_Void_LedTog>:
	default:                                         break;
	}
}
void H_LED_Void_LedTog(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	49 f0       	breq	.+18     	; 0x712 <H_LED_Void_LedTog+0x16>
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	18 f0       	brcs	.+6      	; 0x70a <H_LED_Void_LedTog+0xe>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	61 f4       	brne	.+24     	; 0x720 <H_LED_Void_LedTog+0x24>
 708:	08 c0       	rjmp	.+16     	; 0x71a <H_LED_Void_LedTog+0x1e>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
 70a:	80 e2       	ldi	r24, 0x20	; 32
 70c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <M_DIO_Void_TogPin>
 710:	08 95       	ret
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
 712:	85 e2       	ldi	r24, 0x25	; 37
 714:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <M_DIO_Void_TogPin>
 718:	08 95       	ret
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
 71a:	8b e2       	ldi	r24, 0x2B	; 43
 71c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <M_DIO_Void_TogPin>
 720:	08 95       	ret

00000722 <H_LED_Void_LedSetOff>:
	default:                                          break;
	}
}
void H_LED_Void_LedSetOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	51 f0       	breq	.+20     	; 0x73a <H_LED_Void_LedSetOff+0x18>
 726:	81 30       	cpi	r24, 0x01	; 1
 728:	18 f0       	brcs	.+6      	; 0x730 <H_LED_Void_LedSetOff+0xe>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	79 f4       	brne	.+30     	; 0x74c <H_LED_Void_LedSetOff+0x2a>
 72e:	0a c0       	rjmp	.+20     	; 0x744 <H_LED_Void_LedSetOff+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
 730:	80 e2       	ldi	r24, 0x20	; 32
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 738:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
 73a:	85 e2       	ldi	r24, 0x25	; 37
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 742:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
 744:	8b e2       	ldi	r24, 0x2B	; 43
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 74c:	08 95       	ret

0000074e <H_LED_Void_LedSetOn>:
	default:                                                break;
	}
}
void H_LED_Void_LedSetOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	51 f0       	breq	.+20     	; 0x766 <H_LED_Void_LedSetOn+0x18>
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	18 f0       	brcs	.+6      	; 0x75c <H_LED_Void_LedSetOn+0xe>
 756:	82 30       	cpi	r24, 0x02	; 2
 758:	79 f4       	brne	.+30     	; 0x778 <H_LED_Void_LedSetOn+0x2a>
 75a:	0a c0       	rjmp	.+20     	; 0x770 <H_LED_Void_LedSetOn+0x22>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
 75c:	80 e2       	ldi	r24, 0x20	; 32
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 764:	08 95       	ret
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
 766:	85 e2       	ldi	r24, 0x25	; 37
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 76e:	08 95       	ret
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
 770:	8b e2       	ldi	r24, 0x2B	; 43
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 778:	08 95       	ret

0000077a <H_LED_Void_LedInit>:
#include "LED_Interface.h"


void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	51 f0       	breq	.+20     	; 0x792 <H_LED_Void_LedInit+0x18>
 77e:	81 30       	cpi	r24, 0x01	; 1
 780:	18 f0       	brcs	.+6      	; 0x788 <H_LED_Void_LedInit+0xe>
 782:	82 30       	cpi	r24, 0x02	; 2
 784:	79 f4       	brne	.+30     	; 0x7a4 <H_LED_Void_LedInit+0x2a>
 786:	0a c0       	rjmp	.+20     	; 0x79c <H_LED_Void_LedInit+0x22>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 790:	08 95       	ret
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
 792:	85 e2       	ldi	r24, 0x25	; 37
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 79a:	08 95       	ret
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
 79c:	8b e2       	ldi	r24, 0x2B	; 43
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
 7a4:	08 95       	ret

000007a6 <H_LCD_Void_SetLCDPins>:
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
}

static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
 7a6:	1f 93       	push	r17
 7a8:	18 2f       	mov	r17, r24
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
 7aa:	68 2f       	mov	r22, r24
 7ac:	61 70       	andi	r22, 0x01	; 1
 7ae:	8e e0       	ldi	r24, 0x0E	; 14
 7b0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
 7b4:	61 2f       	mov	r22, r17
 7b6:	66 95       	lsr	r22
 7b8:	61 70       	andi	r22, 0x01	; 1
 7ba:	8f e0       	ldi	r24, 0x0F	; 15
 7bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
 7c0:	61 2f       	mov	r22, r17
 7c2:	66 95       	lsr	r22
 7c4:	66 95       	lsr	r22
 7c6:	61 70       	andi	r22, 0x01	; 1
 7c8:	80 e1       	ldi	r24, 0x10	; 16
 7ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
 7ce:	16 95       	lsr	r17
 7d0:	16 95       	lsr	r17
 7d2:	16 95       	lsr	r17
 7d4:	11 70       	andi	r17, 0x01	; 1
 7d6:	81 e1       	ldi	r24, 0x11	; 17
 7d8:	61 2f       	mov	r22, r17
 7da:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
#endif
}
 7de:	1f 91       	pop	r17
 7e0:	08 95       	ret

000007e2 <H_LCD_Void_LCDWriteCommand>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
 7e2:	ff 92       	push	r15
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
 7ea:	85 e1       	ldi	r24, 0x15	; 21
 7ec:	60 e0       	ldi	r22, 0x00	; 0
 7ee:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
 7f2:	8f 2d       	mov	r24, r15
 7f4:	82 95       	swap	r24
 7f6:	8f 70       	andi	r24, 0x0F	; 15
 7f8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 7fc:	87 e1       	ldi	r24, 0x17	; 23
 7fe:	61 e0       	ldi	r22, 0x01	; 1
 800:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 804:	00 ea       	ldi	r16, 0xA0	; 160
 806:	1f e0       	ldi	r17, 0x0F	; 15
 808:	c8 01       	movw	r24, r16
 80a:	01 97       	sbiw	r24, 0x01	; 1
 80c:	f1 f7       	brne	.-4      	; 0x80a <H_LCD_Void_LCDWriteCommand+0x28>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 80e:	87 e1       	ldi	r24, 0x17	; 23
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 816:	c8 01       	movw	r24, r16
 818:	01 97       	sbiw	r24, 0x01	; 1
 81a:	f1 f7       	brne	.-4      	; 0x818 <H_LCD_Void_LCDWriteCommand+0x36>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
 81c:	8f 2d       	mov	r24, r15
 81e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 822:	87 e1       	ldi	r24, 0x17	; 23
 824:	61 e0       	ldi	r22, 0x01	; 1
 826:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 82a:	c8 01       	movw	r24, r16
 82c:	01 97       	sbiw	r24, 0x01	; 1
 82e:	f1 f7       	brne	.-4      	; 0x82c <H_LCD_Void_LCDWriteCommand+0x4a>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 830:	87 e1       	ldi	r24, 0x17	; 23
 832:	60 e0       	ldi	r22, 0x00	; 0
 834:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 838:	c8 01       	movw	r24, r16
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	f1 f7       	brne	.-4      	; 0x83a <H_LCD_Void_LCDWriteCommand+0x58>
#endif
	_delay_ms(1);
}
 83e:	1f 91       	pop	r17
 840:	0f 91       	pop	r16
 842:	ff 90       	pop	r15
 844:	08 95       	ret

00000846 <H_LCD_Void_LCDClear>:


}
void H_LCD_Void_LCDClear(void)
{
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <H_LCD_Void_LCDWriteCommand>
}
 84c:	08 95       	ret

0000084e <H_LCD_Void_LCDWriteCharacter>:
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#endif

}
void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
 84e:	ff 92       	push	r15
 850:	0f 93       	push	r16
 852:	1f 93       	push	r17
 854:	f8 2e       	mov	r15, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
 856:	85 e1       	ldi	r24, 0x15	; 21
 858:	61 e0       	ldi	r22, 0x01	; 1
 85a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
 85e:	8f 2d       	mov	r24, r15
 860:	82 95       	swap	r24
 862:	8f 70       	andi	r24, 0x0F	; 15
 864:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 868:	87 e1       	ldi	r24, 0x17	; 23
 86a:	61 e0       	ldi	r22, 0x01	; 1
 86c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 870:	00 ea       	ldi	r16, 0xA0	; 160
 872:	1f e0       	ldi	r17, 0x0F	; 15
 874:	c8 01       	movw	r24, r16
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 87a:	87 e1       	ldi	r24, 0x17	; 23
 87c:	60 e0       	ldi	r22, 0x00	; 0
 87e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 882:	c8 01       	movw	r24, r16
 884:	01 97       	sbiw	r24, 0x01	; 1
 886:	f1 f7       	brne	.-4      	; 0x884 <__stack+0x25>
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
 888:	8f 2d       	mov	r24, r15
 88a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
 88e:	87 e1       	ldi	r24, 0x17	; 23
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 896:	c8 01       	movw	r24, r16
 898:	01 97       	sbiw	r24, 0x01	; 1
 89a:	f1 f7       	brne	.-4      	; 0x898 <__stack+0x39>
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
 89c:	87 e1       	ldi	r24, 0x17	; 23
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 8a4:	c8 01       	movw	r24, r16
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <__stack+0x47>
#endif
	_delay_ms(1);
}
 8aa:	1f 91       	pop	r17
 8ac:	0f 91       	pop	r16
 8ae:	ff 90       	pop	r15
 8b0:	08 95       	ret

000008b2 <H_LCD_Void_LCDWriteNumber>:
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
void H_LCD_Void_LCDWriteNumber(s32 Copy_S32_Num)
{
 8b2:	af 92       	push	r10
 8b4:	bf 92       	push	r11
 8b6:	cf 92       	push	r12
 8b8:	df 92       	push	r13
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
 8be:	0f 93       	push	r16
 8c0:	df 93       	push	r29
 8c2:	cf 93       	push	r28
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	62 97       	sbiw	r28, 0x12	; 18
 8ca:	0f b6       	in	r0, 0x3f	; 63
 8cc:	f8 94       	cli
 8ce:	de bf       	out	0x3e, r29	; 62
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	cd bf       	out	0x3d, r28	; 61
 8d4:	6b 01       	movw	r12, r22
 8d6:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = -1;
	u8 Local_U8_Arr[16];
	if(Copy_S32_Num < 0)
 8d8:	99 23       	and	r25, r25
 8da:	5c f4       	brge	.+22     	; 0x8f2 <H_LCD_Void_LCDWriteNumber+0x40>
	{
		Copy_S32_Num = Copy_S32_Num * -1;
 8dc:	f0 94       	com	r15
 8de:	e0 94       	com	r14
 8e0:	d0 94       	com	r13
 8e2:	c0 94       	com	r12
 8e4:	c1 1c       	adc	r12, r1
 8e6:	d1 1c       	adc	r13, r1
 8e8:	e1 1c       	adc	r14, r1
 8ea:	f1 1c       	adc	r15, r1
		H_LCD_Void_LCDWriteCharacter('-');
 8ec:	8d e2       	ldi	r24, 0x2D	; 45
 8ee:	0e 94 27 04 	call	0x84e	; 0x84e <H_LCD_Void_LCDWriteCharacter>
 8f2:	0f ef       	ldi	r16, 0xFF	; 255
	}
	do
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
 8f4:	5e 01       	movw	r10, r28
 8f6:	08 94       	sec
 8f8:	a1 1c       	adc	r10, r1
 8fa:	b1 1c       	adc	r11, r1
		Copy_S32_Num = Copy_S32_Num * -1;
		H_LCD_Void_LCDWriteCharacter('-');
	}
	do
	{
		Local_S8_Counter++;
 8fc:	0f 5f       	subi	r16, 0xFF	; 255
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
 8fe:	80 2f       	mov	r24, r16
 900:	99 27       	eor	r25, r25
 902:	87 fd       	sbrc	r24, 7
 904:	90 95       	com	r25
 906:	95 01       	movw	r18, r10
 908:	28 0f       	add	r18, r24
 90a:	39 1f       	adc	r19, r25
 90c:	3a 8b       	std	Y+18, r19	; 0x12
 90e:	29 8b       	std	Y+17, r18	; 0x11
 910:	c7 01       	movw	r24, r14
 912:	b6 01       	movw	r22, r12
 914:	2a e0       	ldi	r18, 0x0A	; 10
 916:	30 e0       	ldi	r19, 0x00	; 0
 918:	40 e0       	ldi	r20, 0x00	; 0
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodsi4>
 920:	e9 89       	ldd	r30, Y+17	; 0x11
 922:	fa 89       	ldd	r31, Y+18	; 0x12
 924:	60 83       	st	Z, r22
		Copy_S32_Num = Copy_S32_Num / 10;
 926:	c7 01       	movw	r24, r14
 928:	b6 01       	movw	r22, r12
 92a:	2a e0       	ldi	r18, 0x0A	; 10
 92c:	30 e0       	ldi	r19, 0x00	; 0
 92e:	40 e0       	ldi	r20, 0x00	; 0
 930:	50 e0       	ldi	r21, 0x00	; 0
 932:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divmodsi4>
 936:	82 2f       	mov	r24, r18
 938:	93 2f       	mov	r25, r19
 93a:	a4 2f       	mov	r26, r20
 93c:	b5 2f       	mov	r27, r21
 93e:	6c 01       	movw	r12, r24
 940:	7d 01       	movw	r14, r26
	}while(Copy_S32_Num != 0);
 942:	c1 14       	cp	r12, r1
 944:	d1 04       	cpc	r13, r1
 946:	e1 04       	cpc	r14, r1
 948:	f1 04       	cpc	r15, r1
 94a:	c1 f6       	brne	.-80     	; 0x8fc <H_LCD_Void_LCDWriteNumber+0x4a>
	while(Local_S8_Counter >= 0)
 94c:	00 23       	and	r16, r16
 94e:	8c f0       	brlt	.+34     	; 0x972 <H_LCD_Void_LCDWriteNumber+0xc0>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
 950:	7e 01       	movw	r14, r28
 952:	08 94       	sec
 954:	e1 1c       	adc	r14, r1
 956:	f1 1c       	adc	r15, r1
 958:	80 2f       	mov	r24, r16
 95a:	99 27       	eor	r25, r25
 95c:	87 fd       	sbrc	r24, 7
 95e:	90 95       	com	r25
 960:	f7 01       	movw	r30, r14
 962:	e8 0f       	add	r30, r24
 964:	f9 1f       	adc	r31, r25
 966:	80 81       	ld	r24, Z
 968:	80 5d       	subi	r24, 0xD0	; 208
 96a:	0e 94 27 04 	call	0x84e	; 0x84e <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
 96e:	01 50       	subi	r16, 0x01	; 1
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  Copy_S32_Num % 10;
		Copy_S32_Num = Copy_S32_Num / 10;
	}while(Copy_S32_Num != 0);
	while(Local_S8_Counter >= 0)
 970:	9a f7       	brpl	.-26     	; 0x958 <H_LCD_Void_LCDWriteNumber+0xa6>
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48);
		Local_S8_Counter--;
	}


}
 972:	62 96       	adiw	r28, 0x12	; 18
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	0f 91       	pop	r16
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	bf 90       	pop	r11
 98e:	af 90       	pop	r10
 990:	08 95       	ret

00000992 <H_LCD_Void_LCDWriteString>:
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#endif
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	ec 01       	movw	r28, r24
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
 99a:	88 81       	ld	r24, Y
 99c:	88 23       	and	r24, r24
 99e:	51 f0       	breq	.+20     	; 0x9b4 <H_LCD_Void_LCDWriteString+0x22>
 9a0:	10 e0       	ldi	r17, 0x00	; 0
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
 9a2:	0e 94 27 04 	call	0x84e	; 0x84e <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
 9a6:	1f 5f       	subi	r17, 0xFF	; 255
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
 9a8:	fe 01       	movw	r30, r28
 9aa:	e1 0f       	add	r30, r17
 9ac:	f1 1d       	adc	r31, r1
 9ae:	80 81       	ld	r24, Z
 9b0:	88 23       	and	r24, r24
 9b2:	b9 f7       	brne	.-18     	; 0x9a2 <H_LCD_Void_LCDWriteString+0x10>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
 9b4:	df 91       	pop	r29
 9b6:	cf 91       	pop	r28
 9b8:	1f 91       	pop	r17
 9ba:	08 95       	ret

000009bc <H_LCD_Void_LCDInit>:
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
 9bc:	8e e0       	ldi	r24, 0x0E	; 14
 9be:	61 e0       	ldi	r22, 0x01	; 1
 9c0:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
 9c4:	8f e0       	ldi	r24, 0x0F	; 15
 9c6:	61 e0       	ldi	r22, 0x01	; 1
 9c8:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
 9cc:	80 e1       	ldi	r24, 0x10	; 16
 9ce:	61 e0       	ldi	r22, 0x01	; 1
 9d0:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
 9d4:	81 e1       	ldi	r24, 0x11	; 17
 9d6:	61 e0       	ldi	r22, 0x01	; 1
 9d8:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
 9dc:	85 e1       	ldi	r24, 0x15	; 21
 9de:	61 e0       	ldi	r22, 0x01	; 1
 9e0:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
 9e4:	87 e1       	ldi	r24, 0x17	; 23
 9e6:	61 e0       	ldi	r22, 0x01	; 1
 9e8:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
 9ec:	86 e1       	ldi	r24, 0x16	; 22
 9ee:	61 e0       	ldi	r22, 0x01	; 1
 9f0:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
 9f4:	86 e1       	ldi	r24, 0x16	; 22
 9f6:	60 e0       	ldi	r22, 0x00	; 0
 9f8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
 9fc:	83 e3       	ldi	r24, 0x33	; 51
 9fe:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
 a02:	82 e3       	ldi	r24, 0x32	; 50
 a04:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
 a08:	88 e2       	ldi	r24, 0x28	; 40
 a0a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
 a0e:	8c e0       	ldi	r24, 0x0C	; 12
 a10:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <H_LCD_Void_LCDWriteCommand>
#endif

}
 a14:	08 95       	ret

00000a16 <H_Buzzer_Void_BuzzerOnce>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
}
void H_Buzzer_Void_BuzzerOnce(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
 a16:	8d e0       	ldi	r24, 0x0D	; 13
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
 a1e:	28 e5       	ldi	r18, 0x58	; 88
 a20:	32 e0       	ldi	r19, 0x02	; 2
 a22:	40 e9       	ldi	r20, 0x90	; 144
 a24:	51 e0       	ldi	r21, 0x01	; 1
 a26:	ca 01       	movw	r24, r20
 a28:	01 97       	sbiw	r24, 0x01	; 1
 a2a:	f1 f7       	brne	.-4      	; 0xa28 <H_Buzzer_Void_BuzzerOnce+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a2c:	21 50       	subi	r18, 0x01	; 1
 a2e:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a30:	d1 f7       	brne	.-12     	; 0xa26 <H_Buzzer_Void_BuzzerOnce+0x10>
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
 a32:	8d e0       	ldi	r24, 0x0D	; 13
 a34:	60 e0       	ldi	r22, 0x00	; 0
 a36:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
}
 a3a:	08 95       	ret

00000a3c <H_Buzzer_Void_BuzzerSetOff>:
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
}
void H_Buzzer_Void_BuzzerSetOff(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,LOW);
 a3c:	8d e0       	ldi	r24, 0x0D	; 13
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
}
 a44:	08 95       	ret

00000a46 <H_Buzzer_Void_BuzzerSetOn>:
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
}
void H_Buzzer_Void_BuzzerSetOn(void)
{
	M_DIO_Void_SetPinValue(BUZZER_PIN,HIGH);
 a46:	8d e0       	ldi	r24, 0x0D	; 13
 a48:	61 e0       	ldi	r22, 0x01	; 1
 a4a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <M_DIO_Void_SetPinValue>
}
 a4e:	08 95       	ret

00000a50 <H_Buzzer_Void_BuzzerInit>:

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
	M_DIO_Void_SetPinDirection(BUZZER_PIN,OUTPUT);
 a50:	8d e0       	ldi	r24, 0x0D	; 13
 a52:	61 e0       	ldi	r22, 0x01	; 1
 a54:	0e 94 41 00 	call	0x82	; 0x82 <M_DIO_Void_SetPinDirection>
}
 a58:	08 95       	ret

00000a5a <A_SSDProject>:
 */

#include "Projects.h"

void A_SSDProject(void)
{
 a5a:	ef 92       	push	r14
 a5c:	ff 92       	push	r15
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
	int x = 0;
	H_SSD_Void_SSDInit();
 a64:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <H_SSD_Void_SSDInit>
 a68:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{
		H_SSD_Void_SSDWriteNumber(x);
 a6a:	0f 2e       	mov	r0, r31
 a6c:	f0 e1       	ldi	r31, 0x10	; 16
 a6e:	ef 2e       	mov	r14, r31
 a70:	f7 e2       	ldi	r31, 0x27	; 39
 a72:	ff 2e       	mov	r15, r31
 a74:	f0 2d       	mov	r31, r0
 a76:	c0 e9       	ldi	r28, 0x90	; 144
 a78:	d1 e0       	ldi	r29, 0x01	; 1
 a7a:	81 2f       	mov	r24, r17
 a7c:	0e 94 b8 02 	call	0x570	; 0x570 <H_SSD_Void_SSDWriteNumber>
 a80:	97 01       	movw	r18, r14
 a82:	ce 01       	movw	r24, r28
 a84:	01 97       	sbiw	r24, 0x01	; 1
 a86:	f1 f7       	brne	.-4      	; 0xa84 <A_SSDProject+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a88:	21 50       	subi	r18, 0x01	; 1
 a8a:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a8c:	d1 f7       	brne	.-12     	; 0xa82 <A_SSDProject+0x28>
 a8e:	1f 5f       	subi	r17, 0xFF	; 255
 a90:	f4 cf       	rjmp	.-24     	; 0xa7a <A_SSDProject+0x20>

00000a92 <main>:

#include "Projects.h"
#include "LCD_Interface.h"

int main()
{
 a92:	2f 92       	push	r2
 a94:	3f 92       	push	r3
 a96:	4f 92       	push	r4
 a98:	5f 92       	push	r5
 a9a:	6f 92       	push	r6
 a9c:	7f 92       	push	r7
 a9e:	8f 92       	push	r8
 aa0:	9f 92       	push	r9
 aa2:	af 92       	push	r10
 aa4:	bf 92       	push	r11
 aa6:	cf 92       	push	r12
 aa8:	df 92       	push	r13
 aaa:	ef 92       	push	r14
 aac:	ff 92       	push	r15
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	df 93       	push	r29
 ab4:	cf 93       	push	r28
 ab6:	00 d0       	rcall	.+0      	; 0xab8 <main+0x26>
 ab8:	00 d0       	rcall	.+0      	; 0xaba <main+0x28>
 aba:	00 d0       	rcall	.+0      	; 0xabc <main+0x2a>
 abc:	cd b7       	in	r28, 0x3d	; 61
 abe:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDInit();
 ac0:	0e 94 de 04 	call	0x9bc	; 0x9bc <H_LCD_Void_LCDInit>
	int i,j;
	char arr[]="Ahmed";
 ac4:	de 01       	movw	r26, r28
 ac6:	11 96       	adiw	r26, 0x01	; 1
 ac8:	e0 e6       	ldi	r30, 0x60	; 96
 aca:	f0 e0       	ldi	r31, 0x00	; 0
 acc:	86 e0       	ldi	r24, 0x06	; 6
 ace:	01 90       	ld	r0, Z+
 ad0:	0d 92       	st	X+, r0
 ad2:	81 50       	subi	r24, 0x01	; 1
 ad4:	e1 f7       	brne	.-8      	; 0xace <main+0x3c>
 ad6:	cc 24       	eor	r12, r12
 ad8:	dd 24       	eor	r13, r13
	while(1)
	{
		for(i=0;i<16;i++)
		{
			H_LCD_Void_LCDWriteString(arr);
 ada:	3e 01       	movw	r6, r28
 adc:	08 94       	sec
 ade:	61 1c       	adc	r6, r1
 ae0:	71 1c       	adc	r7, r1
 ae2:	0f 2e       	mov	r0, r31
 ae4:	f0 e1       	ldi	r31, 0x10	; 16
 ae6:	4f 2e       	mov	r4, r31
 ae8:	f7 e2       	ldi	r31, 0x27	; 39
 aea:	5f 2e       	mov	r5, r31
 aec:	f0 2d       	mov	r31, r0
 aee:	0f 2e       	mov	r0, r31
 af0:	f0 e9       	ldi	r31, 0x90	; 144
 af2:	ef 2e       	mov	r14, r31
 af4:	f1 e0       	ldi	r31, 0x01	; 1
 af6:	ff 2e       	mov	r15, r31
 af8:	f0 2d       	mov	r31, r0
 afa:	0f 2e       	mov	r0, r31
 afc:	f0 ea       	ldi	r31, 0xA0	; 160
 afe:	2f 2e       	mov	r2, r31
 b00:	ff e0       	ldi	r31, 0x0F	; 15
 b02:	3f 2e       	mov	r3, r31
 b04:	f0 2d       	mov	r31, r0
			_delay_ms(1000);
			H_LCD_Void_LCDClear();
			_delay_ms(1);
			for(j=0;j<=i;j++)
 b06:	aa 24       	eor	r10, r10
 b08:	bb 24       	eor	r11, r11
 b0a:	0f 2e       	mov	r0, r31
 b0c:	f0 e4       	ldi	r31, 0x40	; 64
 b0e:	8f 2e       	mov	r8, r31
 b10:	fc e9       	ldi	r31, 0x9C	; 156
 b12:	9f 2e       	mov	r9, r31
 b14:	f0 2d       	mov	r31, r0
	char arr[]="Ahmed";
	while(1)
	{
		for(i=0;i<16;i++)
		{
			H_LCD_Void_LCDWriteString(arr);
 b16:	c3 01       	movw	r24, r6
 b18:	0e 94 c9 04 	call	0x992	; 0x992 <H_LCD_Void_LCDWriteString>
 b1c:	92 01       	movw	r18, r4
 b1e:	c7 01       	movw	r24, r14
 b20:	01 97       	sbiw	r24, 0x01	; 1
 b22:	f1 f7       	brne	.-4      	; 0xb20 <main+0x8e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b24:	21 50       	subi	r18, 0x01	; 1
 b26:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b28:	d1 f7       	brne	.-12     	; 0xb1e <main+0x8c>
			_delay_ms(1000);
			H_LCD_Void_LCDClear();
 b2a:	0e 94 23 04 	call	0x846	; 0x846 <H_LCD_Void_LCDClear>
 b2e:	c1 01       	movw	r24, r2
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	f1 f7       	brne	.-4      	; 0xb30 <main+0x9e>
			_delay_ms(1);
			for(j=0;j<=i;j++)
 b34:	dd 20       	and	r13, r13
 b36:	4c f0       	brlt	.+18     	; 0xb4a <main+0xb8>
 b38:	85 01       	movw	r16, r10
				H_LCD_Void_LCDWriteCharacter(' ');
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	0e 94 27 04 	call	0x84e	; 0x84e <H_LCD_Void_LCDWriteCharacter>
		{
			H_LCD_Void_LCDWriteString(arr);
			_delay_ms(1000);
			H_LCD_Void_LCDClear();
			_delay_ms(1);
			for(j=0;j<=i;j++)
 b40:	0f 5f       	subi	r16, 0xFF	; 255
 b42:	1f 4f       	sbci	r17, 0xFF	; 255
 b44:	c0 16       	cp	r12, r16
 b46:	d1 06       	cpc	r13, r17
 b48:	c4 f7       	brge	.-16     	; 0xb3a <main+0xa8>
 b4a:	c4 01       	movw	r24, r8
 b4c:	01 97       	sbiw	r24, 0x01	; 1
 b4e:	f1 f7       	brne	.-4      	; 0xb4c <main+0xba>
	H_LCD_Void_LCDInit();
	int i,j;
	char arr[]="Ahmed";
	while(1)
	{
		for(i=0;i<16;i++)
 b50:	08 94       	sec
 b52:	c1 1c       	adc	r12, r1
 b54:	d1 1c       	adc	r13, r1
 b56:	80 e1       	ldi	r24, 0x10	; 16
 b58:	c8 16       	cp	r12, r24
 b5a:	d1 04       	cpc	r13, r1
 b5c:	e4 f2       	brlt	.-72     	; 0xb16 <main+0x84>
 b5e:	65 01       	movw	r12, r10
 b60:	da cf       	rjmp	.-76     	; 0xb16 <main+0x84>

00000b62 <__udivmodqi4>:
 b62:	99 1b       	sub	r25, r25
 b64:	79 e0       	ldi	r23, 0x09	; 9
 b66:	04 c0       	rjmp	.+8      	; 0xb70 <__udivmodqi4_ep>

00000b68 <__udivmodqi4_loop>:
 b68:	99 1f       	adc	r25, r25
 b6a:	96 17       	cp	r25, r22
 b6c:	08 f0       	brcs	.+2      	; 0xb70 <__udivmodqi4_ep>
 b6e:	96 1b       	sub	r25, r22

00000b70 <__udivmodqi4_ep>:
 b70:	88 1f       	adc	r24, r24
 b72:	7a 95       	dec	r23
 b74:	c9 f7       	brne	.-14     	; 0xb68 <__udivmodqi4_loop>
 b76:	80 95       	com	r24
 b78:	08 95       	ret

00000b7a <__divmodsi4>:
 b7a:	97 fb       	bst	r25, 7
 b7c:	09 2e       	mov	r0, r25
 b7e:	05 26       	eor	r0, r21
 b80:	0e d0       	rcall	.+28     	; 0xb9e <__divmodsi4_neg1>
 b82:	57 fd       	sbrc	r21, 7
 b84:	04 d0       	rcall	.+8      	; 0xb8e <__divmodsi4_neg2>
 b86:	14 d0       	rcall	.+40     	; 0xbb0 <__udivmodsi4>
 b88:	0a d0       	rcall	.+20     	; 0xb9e <__divmodsi4_neg1>
 b8a:	00 1c       	adc	r0, r0
 b8c:	38 f4       	brcc	.+14     	; 0xb9c <__divmodsi4_exit>

00000b8e <__divmodsi4_neg2>:
 b8e:	50 95       	com	r21
 b90:	40 95       	com	r20
 b92:	30 95       	com	r19
 b94:	21 95       	neg	r18
 b96:	3f 4f       	sbci	r19, 0xFF	; 255
 b98:	4f 4f       	sbci	r20, 0xFF	; 255
 b9a:	5f 4f       	sbci	r21, 0xFF	; 255

00000b9c <__divmodsi4_exit>:
 b9c:	08 95       	ret

00000b9e <__divmodsi4_neg1>:
 b9e:	f6 f7       	brtc	.-4      	; 0xb9c <__divmodsi4_exit>
 ba0:	90 95       	com	r25
 ba2:	80 95       	com	r24
 ba4:	70 95       	com	r23
 ba6:	61 95       	neg	r22
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	08 95       	ret

00000bb0 <__udivmodsi4>:
 bb0:	a1 e2       	ldi	r26, 0x21	; 33
 bb2:	1a 2e       	mov	r1, r26
 bb4:	aa 1b       	sub	r26, r26
 bb6:	bb 1b       	sub	r27, r27
 bb8:	fd 01       	movw	r30, r26
 bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__udivmodsi4_ep>

00000bbc <__udivmodsi4_loop>:
 bbc:	aa 1f       	adc	r26, r26
 bbe:	bb 1f       	adc	r27, r27
 bc0:	ee 1f       	adc	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	a2 17       	cp	r26, r18
 bc6:	b3 07       	cpc	r27, r19
 bc8:	e4 07       	cpc	r30, r20
 bca:	f5 07       	cpc	r31, r21
 bcc:	20 f0       	brcs	.+8      	; 0xbd6 <__udivmodsi4_ep>
 bce:	a2 1b       	sub	r26, r18
 bd0:	b3 0b       	sbc	r27, r19
 bd2:	e4 0b       	sbc	r30, r20
 bd4:	f5 0b       	sbc	r31, r21

00000bd6 <__udivmodsi4_ep>:
 bd6:	66 1f       	adc	r22, r22
 bd8:	77 1f       	adc	r23, r23
 bda:	88 1f       	adc	r24, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	1a 94       	dec	r1
 be0:	69 f7       	brne	.-38     	; 0xbbc <__udivmodsi4_loop>
 be2:	60 95       	com	r22
 be4:	70 95       	com	r23
 be6:	80 95       	com	r24
 be8:	90 95       	com	r25
 bea:	9b 01       	movw	r18, r22
 bec:	ac 01       	movw	r20, r24
 bee:	bd 01       	movw	r22, r26
 bf0:	cf 01       	movw	r24, r30
 bf2:	08 95       	ret

00000bf4 <_exit>:
 bf4:	f8 94       	cli

00000bf6 <__stop_program>:
 bf6:	ff cf       	rjmp	.-2      	; 0xbf6 <__stop_program>
